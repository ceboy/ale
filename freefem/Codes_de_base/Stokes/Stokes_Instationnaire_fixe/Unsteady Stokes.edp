// Stokes


///////////////////////////////////////////////////////////////////////////////////    Données
verbosity = 2;

real eps1 = 1.e-10;
real mytgv = 1.e30;


///////////////////////////////////////////////////////////////////////////////////    Pas de temps
real pas;
real T;
int mypas;
while(mypas!=2 & mypas!=3 & mypas!=4 & mypas!=5){
	cout<<"Choix du pas de temps : 2 grossier, 3 moyen, 4 fin"<<endl;
	cin>> mypas;
}

if (mypas==2){
	pas=0.1;
	T=20;
}
if (mypas==3){
	pas=0.05;
	T=40.;
}
if (mypas==4){
	pas=0.01;
	T=200.;
}

if (mypas==5){
	pas=0.005;
	T=400.;
}

/////////////////////////////////////////////////////////////////////////////////// Données
real t=0;


func f1x = pi^2*sin(y*pi)*(1./2.+cos(x*pi));
func f1y = -pi^2*sin(x*pi)*(1./2.+cos(y*pi));

func f2x = -pi*sin(y*pi)*((1.+cos(x*pi))/2.);
func f2y = pi*sin(x*pi)*((1.+cos(y*pi))/2.);

/*func fx = pi^2*sin(y*pi)*(1./2.+cos(x*pi));*/
/*func fy = -pi^2*sin(x*pi)*(1./2.+cos(y*pi));*/


///////////////////////////////////////////////////////////////////////////////////    Maillage
int finesse;
string maillage;
mesh Th;

while(finesse!=2 & finesse!=3 & finesse!=4 & finesse!=5){
	cout<<"Choix du maillage : 2 grossier, 3 moyen, 4 fin, 5 ref"<<endl;
	cin>> finesse;
}


if (finesse==2){
	maillage="grossier";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carregrossier.msh"); 
}
if (finesse==3){
	maillage="moyen";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carremoyen.msh"); 
}
if (finesse==4){
	maillage="fin";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carrefin.msh"); 
}
if (finesse==5){
	maillage="ref";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carreref.msh"); 
}

///////////////////////////////////////////////////////////////////////////////////    Formule variatonnelle
varf mass(u,v) = int2d(Th)(u*v);

varf rigidity(u,v) = int2d(Th)(dx(u)*dx(v)+dy(u)*dy(v));

varf divergenceX(u,v) = -int2d(Th)(u*dx(v));

varf divergenceY(u,v) = -int2d(Th)(u*dy(v));

varf boundary(u,v) = on(1,2,3,4,u=1);

varf boundaryentree(u,v) = on(4,u=1);

varf boundarysortie(u,v) = on(1,u=1);

varf boundaryautres(u,v) = on(2,3,u=1);

varf SecMem1x(u,v) = int2d(Th)(f1x*v);

varf SecMem1y(u,v) = int2d(Th)(f1y*v);

varf SecMem2x(u,v) = int2d(Th)(f2x*v);

varf SecMem2y(u,v) = int2d(Th)(f2y*v);

varf SecMemp(u,v) = int2d(Th)(0*v);

varf pmass(p,q) = int2d(Th)(p*q);

///////////////////////////////////////////////////////////////////////////////////    Discrétisation en espace

/// Espaces de discrétisation
string discr="P2";
fespace Uh(Th,P2); Uh u,v,a,b;
fespace Ph(Th,P1); Ph p,q;
int taille=2*Uh.ndof+Ph.ndof;

/// Construction du problème linéaire

matrix MASS = mass(Uh,Uh,tgv=mytgv);

matrix RIGIDITY = rigidity(Uh,Uh,tgv=mytgv);

matrix Bx = divergenceX(Ph,Uh,tgv=mytgv);

matrix By = divergenceY(Ph,Uh,tgv=mytgv);

matrix ZEROCARRE = 0*RIGIDITY;

matrix ZERORECTD = 0*Bx;

matrix ZERORECTG = 0*Bx';

matrix PMASS = pmass(Ph,Ph,tgv=mytgv);

matrix ZEROCARREF = 0.*PMASS;

matrix ZEROCARREFP = 1e-6*PMASS;

matrix BOUNDARYPENALIZATIONx = boundary(Uh,Uh,tgv=mytgv); 

matrix BOUNDARYPENALIZATION = [[BOUNDARYPENALIZATIONx,ZEROCARRE,ZERORECTD],[ZEROCARRE,BOUNDARYPENALIZATIONx,ZERORECTD],[ZERORECTG,ZERORECTG,ZEROCARREF]]; 

matrix Q=[[RIGIDITY,ZEROCARRE,Bx],[ZEROCARRE,RIGIDITY,By],[Bx',By',ZEROCARREFP]];

matrix P=[[MASS,ZEROCARRE,ZERORECTD],[ZEROCARRE,MASS,ZERORECTD],[ZERORECTG,ZERORECTG,ZEROCARREF]];



///////////////////////////////////////////////////////////////////////////////////    Discrétisation en espace



/// stockage des résultats
real[int,int] utab(Uh.ndof,T);
real[int,int] vtab(Uh.ndof,T);
real[int,int] ptab(Ph.ndof,T);

/// Initialisation

u=(sin(y*pi)*(1.+cos(x*pi))/2.);
v=(-sin(x*pi)*(1.+cos(y*pi))/2.);
utab(0:Uh.ndof-1,0)=u[];
vtab(0:Uh.ndof-1,0)=v[];
ptab(0:Ph.ndof-1,0)=0*p[];

/// Choix schema
string schema;
int type;
while (type!=1 & type!=2 & type!=3){
	cout<<"Choix du schema : Euler Implicite 1 ou Crank Nicolson 2 ou BDF2 3"<<endl;
	cin>>type;
}

/// Application du schema
if (type ==1){
	/// Schéma d'Euler implicite
	schema="EI";

	
	
	for (int iter=1;iter<T;iter++){

		
		/// Mise à jour
		t+=pas;
		cout<<"iteration : "<<iter<<" t : "<<t<<endl;		
		/// Construction du second membre

		real[int] F(taille),Fx(Uh.ndof),Fy(Uh.ndof),Fp(Ph.ndof);

		Uh sec1x,sec1y,sec2x,sec2y;
		Ph secp;

		sec1x[] = SecMem1x(0,Uh,tgv=mytgv);
		sec1y[] = SecMem1y(0,Uh,tgv=mytgv);
		sec1x[] *= cos(pi*t);
		sec1y[] *= cos(pi*t);
		
		sec2x[] = SecMem2x(0,Uh,tgv=mytgv);
		sec2y[] = SecMem2y(0,Uh,tgv=mytgv);
		sec2x[] *= sin(pi*t);
		sec2y[] *= sin(pi*t);		
		
		
		
		secp[] = SecMemp(0,Ph,tgv=mytgv);

		Fx=sec1x[]+sec2x[];
		Fy=sec1y[]+sec2y[];
		Fp=secp[];

		F=[Fx,Fy,Fp];
		
		/// Construction du problème linéaire au pas de temps considéré
		real[int] Uav(taille);
		Uav=[utab(0:Uh.ndof-1,iter-1),vtab(0:Uh.ndof-1,iter-1),ptab(0:Ph.ndof-1,iter-1)];
		matrix A=(P+pas*Q);
		real[int] intermediaire1(taille);
		intermediaire1=P*Uav;
		real[int] B(taille);
		B=intermediaire1+pas*F;
		
		/// Prise en compte des conditions aux bords dans la matrice à inverser
		
		matrix Ap=A+BOUNDARYPENALIZATION;
		
		/// Construction de l'autre matrice avec penalisation

		real[int] BCx(Uh.ndof),BCy(Uh.ndof);

		BCx=mytgv*u[];
		BCx*=cos(t*pi);
		BCy=mytgv*v[];
		BCy*=cos(t*pi);

		real[int] BOUNDARYENTREE = boundaryentree(0,Uh);
		
		real[int] BOUNDARYSORTIE = boundarysortie(0,Uh);

		real[int] BOUNDARYAUTRES = boundaryautres(0,Uh);
		
		real[int] ZEROD(Uh.ndof);
		ZEROD=0.*B(Uh.ndof:2*Uh.ndof-1);
		

		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYENTREE ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);
		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYSORTIE ? BCy : B(Uh.ndof:2*Uh.ndof-1);
		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYAUTRES ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);

		B(0:Uh.ndof-1) = BOUNDARYAUTRES ? ZEROD : B(0:Uh.ndof-1);
		B(0:Uh.ndof-1) = BOUNDARYENTREE ? BCx : B(0:Uh.ndof-1);
		B(0:Uh.ndof-1) = BOUNDARYSORTIE ? ZEROD : B(0:Uh.ndof-1);

		/// Résolution du problème linéaire
		
		real[int] U(taille);
		set(Ap,eps=eps1,solver=UMFPACK);
		U=Ap^-1*B;

		/// Stockage des résultats
		utab(0:Uh.ndof-1,iter)=U(0:Uh.ndof-1);
		vtab(0:Uh.ndof-1,iter)=U(Uh.ndof:2*Uh.ndof-1);
		ptab(0:Ph.ndof-1,iter)=U(2*Uh.ndof:2*Uh.ndof+Ph.ndof-1);
		
		Uh utest,vtest;
		utest[]=utab(0:Uh.ndof-1,iter);
		vtest[]=vtab(0:Uh.ndof-1,iter);
		p[]=ptab(0:Ph.ndof-1,iter);
		plot(p,fill=1,wait=1,value=1);
		
		/// Test
		real[int] myres1(taille),myres2(taille);
		myres1=Ap*U;
		myres2=myres1-B;
		cout<<"myres1 : "<<myres2.max<<endl;
		
		matrix Qtest=[[RIGIDITY,ZEROCARRE,Bx],[ZEROCARRE,RIGIDITY,By]];
		matrix Ptest=[[MASS,ZEROCARRE,ZERORECTD],[ZEROCARRE,MASS,ZERORECTD]];
		matrix Atest=(Ptest+pas*Qtest);
		real[int] Btest=B(0:2*Uh.ndof-1);
		real[int] Utest=U(0:2*Uh.ndof-1);
		real[int] myres3(2*Uh.ndof),myres4(2*Uh.ndof);
		myres3=Atest*U;
		myres4=myres3-B;
		//cout<<myres4<<endl;
		ofstream Test("test.gp");
		Test<<myres4;
		cout<<"myres2 : "<<myres4.linfty<<endl;
		
		
	}
}

if (type==2){
	/// Schéma de Crank Nicolson
	schema="CN";
	real theta=0.5;
	for (int iter=1;iter<T;iter++){
		///Mise à jour
		cout<<"iteration : "<<iter<<" t : "<<t<<endl;
		t+=pas;
		
		/// Construction du second membre

		real[int] F(taille),Fx(Uh.ndof),Fy(Uh.ndof),Fp(Ph.ndof);

		Uh sec1x,sec1y,sec2x,sec2y;
		Ph secp;

		sec1x[] = SecMem1x(0,Uh,tgv=mytgv);
		sec1y[] = SecMem1y(0,Uh,tgv=mytgv);
		sec1x[] *= cos(pi*t);
		sec1y[] *= cos(pi*t);
		
		sec2x[] = SecMem2x(0,Uh,tgv=mytgv);
		sec2y[] = SecMem2y(0,Uh,tgv=mytgv);
		sec2x[] *= sin(pi*t);
		sec2y[] *= sin(pi*t);		
		
		
		
		secp[] = SecMemp(0,Ph,tgv=mytgv);

		Fx=sec1x[]+sec2x[];
		Fy=sec1y[]+sec2y[];
		Fp=secp[];

		F=[Fx,Fy,Fp];
		
		real[int] Fav(taille),Fxav(Uh.ndof),Fyav(Uh.ndof),Fpav(Ph.ndof);

		Uh sec1xav,sec1yav,sec2xav,sec2yav;
		Ph secpav;

		sec1xav[] = SecMem1x(0,Uh,tgv=mytgv);
		sec1yav[] = SecMem1y(0,Uh,tgv=mytgv);
		sec1xav[] *= cos(pi*(t-pas));
		sec1yav[] *= cos(pi*(t-pas));
		
		sec2xav[] = SecMem2x(0,Uh,tgv=mytgv);
		sec2yav[] = SecMem2y(0,Uh,tgv=mytgv);
		sec2xav[] *= sin(pi*(t-pas));
		sec2yav[] *= sin(pi*(t-pas));		
		
		
		
		secpav[] = SecMemp(0,Ph,tgv=mytgv);

		Fxav=sec1xav[]+sec2xav[];
		Fyav=sec1yav[]+sec2yav[];
		Fpav=secpav[];

		Fav=[Fxav,Fyav,Fpav];		
		
		
		///Construction du problème linéaire au pas de temps considéré
		real[int] Uav(taille);
		Uav=[utab(0:Uh.ndof-1,iter-1),vtab(0:Uh.ndof-1,iter-1),ptab(0:Ph.ndof-1,iter-1)];
		matrix A=(P+(pas*theta)*Q);
		matrix intermediaire1=P+(-pas*(1-theta))*Q;
		real[int] intermediaire2=intermediaire1*Uav;
		real[int] B=intermediaire2+theta*pas*F;
		B=B+(1-theta)*pas*Fav;
	
		///Prise en compte des conditions aux bords dans la matrice à inverser
	
		matrix Ap=A+BOUNDARYPENALIZATION;
	
		///Construction de l'autre matrice avec penalisation


		real[int] BCx(Uh.ndof),BCy(Uh.ndof);

		BCx=mytgv*u[];
		BCx*=cos(t*pi);
		BCy=mytgv*v[];
		BCy*=cos(t*pi);

		real[int] BOUNDARYENTREE = boundaryentree(0,Uh);
		
		real[int] BOUNDARYSORTIE = boundarysortie(0,Uh);

		real[int] BOUNDARYAUTRES = boundaryautres(0,Uh);
		
		real[int] ZEROD(Uh.ndof);
		ZEROD=0.*B(Uh.ndof:2*Uh.ndof-1);
		

		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYENTREE ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);
		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYSORTIE ? BCy : B(Uh.ndof:2*Uh.ndof-1);
		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYAUTRES ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);

		B(0:Uh.ndof-1) = BOUNDARYAUTRES ? ZEROD : B(0:Uh.ndof-1);
		B(0:Uh.ndof-1) = BOUNDARYENTREE ? BCx : B(0:Uh.ndof-1);
		B(0:Uh.ndof-1) = BOUNDARYSORTIE ? ZEROD : B(0:Uh.ndof-1);


		///Résolution du problème linéaire
	
		real[int] U(taille);
		set(Ap,eps=eps1,solver=UMFPACK);
		U=Ap^-1*B;
	
		///Stockage des résultats
		utab(0:Uh.ndof-1,iter)=U(0:Uh.ndof-1);
		vtab(0:Uh.ndof-1,iter)=U(Uh.ndof:2*Uh.ndof-1);
		ptab(0:Ph.ndof-1,iter)=U(2*Uh.ndof:2*Uh.ndof+Ph.ndof-1);

	}
}


if (type==3){
	/// Schéma BDF2
	schema="BDF2";
	real theta=0.5;
	
	///Mise à jour
	cout<<"iteration : "<<1<<" t : "<<t<<endl;
	t+=pas;
	
	/// Construction du second membre

	real[int] F(taille),Fx(Uh.ndof),Fy(Uh.ndof),Fp(Ph.ndof);

	Uh sec1x,sec1y,sec2x,sec2y;
	Ph secp;

	sec1x[] = SecMem1x(0,Uh,tgv=mytgv);
	sec1y[] = SecMem1y(0,Uh,tgv=mytgv);
	sec1x[] *= cos(pi*t);
	sec1y[] *= cos(pi*t);
	
	sec2x[] = SecMem2x(0,Uh,tgv=mytgv);
	sec2y[] = SecMem2y(0,Uh,tgv=mytgv);
	sec2x[] *= sin(pi*t);
	sec2y[] *= sin(pi*t);		
	
	
	
	secp[] = SecMemp(0,Ph,tgv=mytgv);

	Fx=sec1x[]+sec2x[];
	Fy=sec1y[]+sec2y[];
	Fp=secp[];

	F=[Fx,Fy,Fp];
	
	real[int] Fav(taille),Fxav(Uh.ndof),Fyav(Uh.ndof),Fpav(Ph.ndof);

	Uh sec1xav,sec1yav,sec2xav,sec2yav;
	Ph secpav;

	sec1xav[] = SecMem1x(0,Uh,tgv=mytgv);
	sec1yav[] = SecMem1y(0,Uh,tgv=mytgv);
	sec1xav[] *= cos(pi*(t-pas));
	sec1yav[] *= cos(pi*(t-pas));
	
	sec2xav[] = SecMem2x(0,Uh,tgv=mytgv);
	sec2yav[] = SecMem2y(0,Uh,tgv=mytgv);
	sec2xav[] *= sin(pi*(t-pas));
	sec2yav[] *= sin(pi*(t-pas));		
	
	
	
	secpav[] = SecMemp(0,Ph,tgv=mytgv);

	Fxav=sec1xav[]+sec2xav[];
	Fyav=sec1yav[]+sec2yav[];
	Fpav=secpav[];

	Fav=[Fxav,Fyav,Fpav];		
	
	
	///Construction du problème linéaire au pas de temps considéré
	real[int] Uav(taille);
	Uav=[utab(0:Uh.ndof-1,0),vtab(0:Uh.ndof-1,0),ptab(0:Ph.ndof-1,0)];
	matrix A=(P+(pas*theta)*Q);
	matrix intermediaire1=P+(-pas*(1-theta))*Q;
	real[int] intermediaire2=intermediaire1*Uav;
	real[int] B=intermediaire2+theta*pas*F;
	B=B+(1-theta)*pas*Fav;

	///Prise en compte des conditions aux bords dans la matrice à inverser

	matrix Ap=A+BOUNDARYPENALIZATION;

	///Construction de l'autre matrice avec penalisation


	real[int] BCx(Uh.ndof),BCy(Uh.ndof);

	BCx=mytgv*u[];
	BCx*=cos(t*pi);
	BCy=mytgv*v[];
	BCy*=cos(t*pi);

	real[int] BOUNDARYENTREE = boundaryentree(0,Uh);
	
	real[int] BOUNDARYSORTIE = boundarysortie(0,Uh);

	real[int] BOUNDARYAUTRES = boundaryautres(0,Uh);
	
	real[int] ZEROD(Uh.ndof);
	ZEROD=0.*B(Uh.ndof:2*Uh.ndof-1);
	

	B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYENTREE ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);
	B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYSORTIE ? BCy : B(Uh.ndof:2*Uh.ndof-1);
	B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYAUTRES ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);

	B(0:Uh.ndof-1) = BOUNDARYAUTRES ? ZEROD : B(0:Uh.ndof-1);
	B(0:Uh.ndof-1) = BOUNDARYENTREE ? BCx : B(0:Uh.ndof-1);
	B(0:Uh.ndof-1) = BOUNDARYSORTIE ? ZEROD : B(0:Uh.ndof-1);


	///Résolution du problème linéaire

	real[int] U(taille);
	set(Ap,eps=eps1,solver=UMFPACK);
	U=Ap^-1*B;

	///Stockage des résultats
	utab(0:Uh.ndof-1,1)=U(0:Uh.ndof-1);
	vtab(0:Uh.ndof-1,1)=U(Uh.ndof:2*Uh.ndof-1);
	ptab(0:Ph.ndof-1,1)=U(2*Uh.ndof:2*Uh.ndof+Ph.ndof-1);

	
// 	utab(0:Uh.ndof-1,1)=u[]*cos(pi*t);
// 	vtab(0:Uh.ndof-1,1)=v[]*cos(pi*t);
// 	ptab(0:Uh.ndof-1,1)=p[]*cos(pi*t);

		
	////////////// Boucle en temps
	
	for (int iter=2;iter<T;iter++){
		// Mise à jour
		cout<<"iteration : "<<iter<<" t : "<<t<<endl;
		t+=pas;
		
		/// Construction du second membre

		real[int] F(taille),Fx(Uh.ndof),Fy(Uh.ndof),Fp(Ph.ndof);

		Uh sec1x,sec1y,sec2x,sec2y;
		Ph secp;

		sec1x[] = SecMem1x(0,Uh,tgv=mytgv);
		sec1y[] = SecMem1y(0,Uh,tgv=mytgv);
		sec1x[] *= cos(pi*t);
		sec1y[] *= cos(pi*t);
		
		sec2x[] = SecMem2x(0,Uh,tgv=mytgv);
		sec2y[] = SecMem2y(0,Uh,tgv=mytgv);
		sec2x[] *= sin(pi*t);
		sec2y[] *= sin(pi*t);		
		
		
		
		secp[] = SecMemp(0,Ph,tgv=mytgv);

		Fx=sec1x[]+sec2x[];
		Fy=sec1y[]+sec2y[];
		Fp=secp[];

		F=[Fx,Fy,Fp];
		
		/// Construction du problème linéaire au pas de temps considéré
		real[int] U0(taille),U1(taille);
		U0=[utab(0:Uh.ndof-1,iter-2),vtab(0:Uh.ndof-1,iter-2),ptab(0:Ph.ndof-1,iter-2)];
		U1=[utab(0:Uh.ndof-1,iter-1),vtab(0:Uh.ndof-1,iter-1),ptab(0:Ph.ndof-1,iter-1)];
		matrix A=(P+(pas*2./3.)*Q);
		real[int] intermediaire1(taille);
		intermediaire1=P*U1;
		intermediaire1=(4./3.)*intermediaire1;
		real[int] intermediaire2(taille);
		intermediaire2=P*U0;
		intermediaire2=(-1./3.)*intermediaire2;
		real[int] intermediaire3(taille);
		intermediaire3=(2./3.)*pas*F;
		real[int] B=intermediaire1+intermediaire2;
		B=B+intermediaire3;
		
		/// Prise en compte des conditions aux bords dans la matrice à inverser
	
		matrix Ap=A+BOUNDARYPENALIZATION;
	
		/// Construction de l'autre matrice avec penalisation

		real[int] BCx(Uh.ndof),BCy(Uh.ndof);

		BCx=mytgv*u[];
		BCx*=cos(t*pi);
		BCy=mytgv*v[];
		BCy*=cos(t*pi);
		

		real[int] BOUNDARYENTREE = boundaryentree(0,Uh);
	
		real[int] BOUNDARYSORTIE = boundarysortie(0,Uh);

		real[int] BOUNDARYAUTRES = boundaryautres(0,Uh);

		real[int] ZEROD(Uh.ndof);
		ZEROD=0.*B(Uh.ndof:2*Uh.ndof-1);
	
		B(0:Uh.ndof-1) = BOUNDARYENTREE ? BCx : B(0:Uh.ndof-1);
		B(0:Uh.ndof-1) = BOUNDARYSORTIE ? ZEROD : B(0:Uh.ndof-1);
		B(0:Uh.ndof-1) = BOUNDARYAUTRES ? ZEROD : B(0:Uh.ndof-1);

		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYENTREE ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);
		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYSORTIE ? BCy : B(Uh.ndof:2*Uh.ndof-1);
		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYAUTRES ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);

		/// Résolution du problème linéaire
	
		real[int] U2(taille);
		set(Ap,eps=eps1,solver=UMFPACK);
		U2=Ap^-1*B;
	
		/// Stockage des résultats
		utab(0:Uh.ndof-1,iter)=U2(0:Uh.ndof-1);
		vtab(0:Uh.ndof-1,iter)=U2(Uh.ndof:2*Uh.ndof-1);
		ptab(0:Ph.ndof-1,iter)=U2(2*Uh.ndof:2*Uh.ndof+Ph.ndof-1);

	}
}

///////////////////////////////////////////////////////////////////////////////////    Visualisation et Sauvegarde des données

/// Création des divers dossiers de stockage
exec("mkdir "+"Vitesses");
exec("mkdir "+"Vitesses/"+maillage);
exec("mkdir "+"Vitesses/"+maillage+"/"+schema);
exec("mkdir "+"Vitesses/"+maillage+"/"+schema+"/"+discr);
exec("mkdir "+"Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas);
exec("mkdir "+"Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/u");
exec("mkdir "+"Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/v");
exec("mkdir "+"Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/p");


for (int i=0;i<T;i++){
	u[]=utab(0:Uh.ndof-1,i);
	v[]=vtab(0:Uh.ndof-1,i);
	p[]=ptab(0:Ph.ndof-1,i);
	
	/// Visualisation
	plot(p,fill=1,wait=1,value=1);
	
	/// Stockage
// 	ofstream U ("Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/u/u"+i+".txt");
// 	ofstream V ("Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/v/v"+i+".txt");
// 	ofstream P ("Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/p/p"+i+".txt");
// 	U<<u[];
// 	V<<v[];
// 	P<<p[];
}



cout<<endl<<"Rappel"<<endl<<endl<<"Maillage : "<<maillage<<endl<<"Schema : "<<schema<<endl<<"Pas de temps : "<<pas<<endl<<endl;


