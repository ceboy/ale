// Stokes


/////////////////////////////////////////////////////////////////////////////////// Données

verbosity = 0;

real eps1 = 1.e-10;
real mytgv = 1.e30;

real rho = 1; real mu = 1.e-3;

real g = 10;

// Géomterie de la vague
real Hwave = 0.1;
real hwave = 3;
real kwave = 3;
real wwave = sqrt(g*kwave*tanh(kwave*hwave));
real Twave = 2*pi/wwave;
real Lwave = 2*pi/kwave;

// Force

func fvolx = 0.;
func fvoly = -g;



// Géometrie du maillage de référence
real x0=0;
real x1=2*pi;

real y0=0;
real y1=hwave;

real t=0;

///////////////////////////////////////////////////////////////////////////////////    Pas de temps
real pas;
real T;
int mypas=0;
while(mypas>16 || mypas<1){
	cout<<"Choix du pas de temps : entre 1 et 16 du plus grossier au plus fin"<<endl;
	cin>> mypas;
}

if (mypas==1){
	pas=0.6;
	T=10.;
}
if (mypas==2){
	pas=0.5;
	T=12.;
}
if (mypas==3){
	pas=0.4;
	T=15.;
}
if (mypas==4){
	pas=0.3;
	T=20.;
}
if (mypas==5){
	pas=0.2;
	T=30.;
}
if (mypas==6){
	pas=0.15;
	T=40.;
}
if (mypas==7){
	pas=0.1;
	T=60.;
}
if (mypas==8){
	pas=0.06;
	T=100.;
}
if (mypas==9){
	pas=0.05;
	T=120.;
}
if (mypas==10){
	pas=0.04;
	T=150.;
}
if (mypas==11){
	pas=0.03;
	T=200.;
}
if (mypas==12){
	pas=0.02;
	T=300.;
}
if (mypas==13){
	pas=0.015;
	T=400.;
}
if (mypas==14){
	pas=0.01;
	T=600.;
}
if (mypas==15){
	pas=0.006;
	T=1000.;
}
if (mypas==16){
	pas=0.005;
	T=1200.;
}






///////////////////////////////////////////////////////////////////////////////////    Maillage de référence
int finesse=-1;
int coef;
while(finesse>16 || finesse<1){
	cout<<"Choix du maillage : entre 1 et 16 du plus grossier au plus fin"<<endl;
	cin>> finesse;
}
if (finesse==1){
	coef=20;
}
if (finesse==2){
	coef=25;
}
if (finesse==3){
	coef=30;
}
if (finesse==4){
	coef=35;
}
if (finesse==5){
	coef=45;
}
if (finesse==6){
	coef=50;
}
if (finesse==7){
	coef=55;
}
if (finesse==8){
	coef=60;
}
if (finesse==9){
	coef=65;
}
if (finesse==10){
	coef=70;
}
if (finesse==11){
	coef=75;
}
if (finesse==12){
	coef=80;
}
if (finesse==13){
	coef=85;
}
if (finesse==14){
	coef=90;
}
if (finesse==15){
	coef=95;
}
if (finesse==16){
	coef=100;
}
mesh Th0=square(coef,coef,[x0+(x1-x0)*x,y0+(y1-y0)*y]);
/*plot(Th0);*/

mesh Th=Th0;

///////////////////////////////////////////////////////////////////////////////////    Formule variatonnelle
varf mass(u,v) = int2d(Th)(u*v);

varf rigidity(u,v) = int2d(Th)(dx(u)*dx(v)+dy(u)*dy(v));

varf divergenceX(u,v) = -int2d(Th)(u*dx(v));

varf divergenceY(u,v) = -int2d(Th)(u*dy(v));

varf boundary(u,v) = on(1,3,u=1);

varf boundaryentree(u,v) = on(4,u=1);

varf boundarysortie(u,v) = on(2,u=1);

varf boundaryhaut(u,v) = on(3,u=1);

varf boundarybas(u,v) = on(1,u=1);

varf pmass(p,q) = int2d(Th)(p*q);

varf restex(u,v) = int1d(Th,3)(dy(u)*v);

varf restey(u,v) = int1d(Th,3)(dy(u)*v);

varf SecMemx(u,v) = int2d(Th)(fvolx*v);

varf SecMemy(u,v) = int2d(Th)(fvoly*v);

varf SecMemp(u,v,tgv=mytgv) = int2d(Th)( 0.*v );


///////////////////////////////////////////////////////////////////////////////////    Discrétisation en espace

/// Espaces de discrétisation
string discr="P2";
fespace Uh(Th,P2,periodic=[[2,y],[4,y]]); Uh u,v,a,b,eta2;
fespace Ph(Th,P1,periodic=[[2,y],[4,y]]); Ph p,q,eta1;
int taille=2*Uh.ndof+Ph.ndof;

/// Construction du problème linéaire

matrix MASS = mass(Uh,Uh,tgv=mytgv);

matrix RIGIDITY = rigidity(Uh,Uh,tgv=mytgv);RIGIDITY=(mu/rho)*RIGIDITY;

matrix Bx = divergenceX(Ph,Uh,tgv=mytgv);Bx=(1./rho)*Bx;

matrix By = divergenceY(Ph,Uh,tgv=mytgv);By=(1./rho)*By;

matrix RESTEX = restex(Uh,Uh,tgv=mytgv);RESTEX=(-mu)*RESTEX;
// 
// matrix RESTEY = restey(Uh,Uh,tgv=mytgv);RESTEY=(-mu)*RESTEY;
// 
matrix RIGIDITYX=RIGIDITY+RESTEX;
// 
// matrix RIGIDITYY=RIGIDITY+RESTEY;

matrix ZEROCARRE = 0*RIGIDITY;

matrix ZERORECTD = 0*Bx;

matrix ZERORECTG = 0*Bx';

matrix PMASS = pmass(Ph,Ph,tgv=mytgv);

matrix ZEROCARREF = 0.*PMASS;

matrix ZEROCARREFP = 1e-6*PMASS;

matrix BOUNDARYPENALIZATIONx = boundarybas(Uh,Uh,tgv=mytgv); 

matrix BOUNDARYPENALIZATION = [[BOUNDARYPENALIZATIONx,ZEROCARRE,ZERORECTD],[ZEROCARRE,BOUNDARYPENALIZATIONx,ZERORECTD],[ZERORECTG,ZERORECTG,ZEROCARREF]]; 

matrix Q=[[RIGIDITYX,ZEROCARRE,Bx],[ZEROCARRE,RIGIDITY,By],[Bx',By',ZEROCARREFP]];

matrix P=[[MASS,ZEROCARRE,ZERORECTD],[ZEROCARRE,MASS,ZERORECTD],[ZERORECTG,ZERORECTG,ZEROCARREF]];



///////////////////////////////////////////////////////////////////////////////////    Discrétisation en espace



/// stockage des résultats
real[int,int] utab(Uh.ndof,T);
real[int,int] vtab(Uh.ndof,T);
real[int,int] ptab(Ph.ndof,T);

/// Initialisation

u = (pi*Hwave/Twave)*(cosh(kwave*(y))/sinh(kwave*hwave))*cos(kwave*x-wwave*t); 
v = (pi*Hwave/Twave)*(sinh(kwave*(y))/sinh(kwave*hwave))*sin(kwave*x-wwave*t);
p = -rho*g*(y-hwave) + rho*(g*Hwave/2.)*(cosh(kwave*(y))/cosh(kwave*hwave))*cos(kwave*x-wwave*t);
eta2 = (Hwave/2.)*cos(kwave*x-wwave*t)*(y/hwave);

utab(0:Uh.ndof-1,0)=u[];
vtab(0:Uh.ndof-1,0)=v[];
ptab(0:Ph.ndof-1,0)=p[];
// plot([u,v],fill=1,wait=1,value=1);
/// Choix schema
string schema;
int type=-1;
while (type!=0 & type!=1 & type!=2 & type!=3){
	cout<<"Choix du schema : Euler Implicite 1 ou Crank Nicolson 2 ou BDF2 3"<<endl;
	cin>>type;
}

/// Application du schema

	
if (type==0){
	
	/// Théorie linéaire
	schema="Vague lineaire";
	
	for (int iter=1;iter<T;iter++){
		/// Mise à jour
		t+=pas;
		cout<<"iteration : "<<iter<<" t : "<<t<<endl;	
		

		u = (pi*Hwave/Twave)*(cosh(kwave*(y))/sinh(kwave*hwave))*cos(kwave*x-wwave*t); 
		v = (pi*Hwave/Twave)*(sinh(kwave*(y))/sinh(kwave*hwave))*sin(kwave*x-wwave*t);
		p = -rho*g*(y-hwave) + rho*(g*Hwave/2)*(cosh(kwave*(y))/cosh(kwave*hwave))*cos(kwave*x-wwave*t);
		
		utab(0:Uh.ndof-1,iter)=u[];
		vtab(0:Uh.ndof-1,iter)=v[];
		ptab(0:Ph.ndof-1,iter)=p[];
		plot([u,v],wait=1,value=1);
		
	}
}
	
if (type ==1){
	/// Schéma d'Euler implicite
	schema="EI";
	
	
	for (int iter=1;iter<T;iter++){

		
		/// Mise à jour
		t+=pas;
		cout<<"iteration : "<<iter<<" t : "<<t<<endl;		
		/// Construction du second membre
		
		eta2=eta2+pas*v;
// 		Ph eta1;
// 		eta1=(Hwave/2.)*cos(kwave*x-wwave*t)*(y/hwave);
// 		plot(eta2,wait=1,fill=1);
// 		plot(eta1,wait=1,fill=1);
		real[int] F(taille),Fx(Uh.ndof),Fy(Uh.ndof),Fp(Ph.ndof);

		Uh secx,secy;
		Ph secp;
		
		Ph p0;
		eta1=eta2;
		p0[]=(-1.)*rho*g*eta1[];
		varf neumann(u,v)=int1d(Th,3)(p0*v);
		real[int] NEUMANN(Uh.ndof);
		NEUMANN=neumann(0,Uh);
		NEUMANN=(1./rho)*NEUMANN;

		secx[] = SecMemx(0,Uh,tgv=mytgv);
		secy[] = SecMemy(0,Uh,tgv=mytgv);
		secp[] = SecMemp(0,Ph,tgv=mytgv);

		Fx=secx[];
		Fy=secy[];
		Fp=secp[];
		Fy=Fy+NEUMANN;
		F=[Fx,Fy,Fp];

		/// Construction du problème linéaire au pas de temps considéré
		real[int] Uav(taille);
		Uav=[utab(0:Uh.ndof-1,iter-1),vtab(0:Uh.ndof-1,iter-1),ptab(0:Ph.ndof-1,iter-1)];
		
		matrix A=(P+pas*Q);
		real[int] intermediaire1(taille);
		intermediaire1=P*Uav;
		real[int] B(taille);
		B=intermediaire1+pas*F;

		/// Prise en compte des conditions aux bords dans la matrice à inverser
		
		matrix Ap=A+BOUNDARYPENALIZATION;
		
		/// Construction de l'autre matrice avec penalisation

		real[int] BCx(Uh.ndof),BCy(Uh.ndof);

		BCx=mytgv*u[];
		BCx*=0;
		BCy=mytgv*v[];
		BCy*=0;

// 		real[int] BOUNDARYENTREE = boundaryentree(0,Uh);
// 		
// 		real[int] BOUNDARYSORTIE = boundarysortie(0,Uh);

		real[int] BOUNDARYBAS = boundarybas(0,Uh);
		
		real[int] ZEROD(Uh.ndof);
		ZEROD=0.*B(Uh.ndof:2*Uh.ndof-1);
		

		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYBAS ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);

// 		B(0:Uh.ndof-1) = BOUNDARYBAS ? ZEROD : B(0:Uh.ndof-1);

		/// Résolution du problème linéaire
		
		real[int] U(taille);
		set(Ap,eps=eps1,solver=UMFPACK);
		U=Ap^-1*B;

		/// Stockage des résultats
		utab(0:Uh.ndof-1,iter)=U(0:Uh.ndof-1);
		vtab(0:Uh.ndof-1,iter)=U(Uh.ndof:2*Uh.ndof-1);
		ptab(0:Ph.ndof-1,iter)=U(2*Uh.ndof:2*Uh.ndof+Ph.ndof-1);
		

		u[]=utab(0:Uh.ndof-1,iter);
		v[]=vtab(0:Uh.ndof-1,iter);
		p[]=ptab(0:Ph.ndof-1,iter);
		plot([u,v],fill=1,wait=1,value=1);
		
		/// Test
// 		real[int] myres1(taille),myres2(taille);
// 		myres1=Ap*U;
// 		myres2=myres1-B;
// 		cout<<"myres1 : "<<myres2.max<<endl;
// 		
// 		matrix Qtest=[[RIGIDITY,ZEROCARRE,Bx],[ZEROCARRE,RIGIDITY,By]];
// 		matrix Ptest=[[MASS,ZEROCARRE,ZERORECTD],[ZEROCARRE,MASS,ZERORECTD]];
// 		matrix Atest=(Ptest+pas*Qtest);
// 		real[int] Btest=B(0:2*Uh.ndof-1);
// 		real[int] Utest=U(0:2*Uh.ndof-1);
// 		real[int] myres3(2*Uh.ndof),myres4(2*Uh.ndof);
// 		myres3=Atest*U;
// 		myres4=myres3-B;
// 		//cout<<myres4<<endl;
// 		ofstream Test("test.gp");
// 		Test<<myres4;
// 		cout<<"myres2 : "<<myres4.linfty<<endl;
		
		
	}
}

if (type==2){
	/// Schéma de Crank Nicolson
	schema="CN";
	real theta=0.5;
	for (int iter=1;iter<T;iter++){
		///Mise à jour
		cout<<"iteration : "<<iter<<" t : "<<t<<endl;
		t+=pas;
		
		/// Construction du second membre

		real[int] F(taille),Fx(Uh.ndof),Fy(Uh.ndof),Fp(Ph.ndof);

		Uh secx,secy;
		Ph secp;

		secx[] = SecMemx(0,Uh,tgv=mytgv);
		secy[] = SecMemy(0,Uh,tgv=mytgv);	
		secp[] = SecMemp(0,Ph,tgv=mytgv);

		Fx=secx[];
		Fy=secy[];
		Fp=secp[];

		F=[Fx,Fy,Fp];
		
		real[int] Fav(taille),Fxav(Uh.ndof),Fyav(Uh.ndof),Fpav(Ph.ndof);

		Uh secxav,secyav;
		Ph secpav;

		secxav[] = SecMemx(0,Uh,tgv=mytgv);
		secyav[] = SecMemy(0,Uh,tgv=mytgv);
		secpav[] = SecMemp(0,Ph,tgv=mytgv);

		Fxav=secxav[];
		Fyav=secyav[];
		Fpav=secpav[];

		Fav=[Fxav,Fyav,Fpav];		
		
		
		///Construction du problème linéaire au pas de temps considéré
		real[int] Uav(taille);
		Uav=[utab(0:Uh.ndof-1,iter-1),vtab(0:Uh.ndof-1,iter-1),ptab(0:Ph.ndof-1,iter-1)];
		matrix A=(P+(pas*theta)*Q);
		matrix intermediaire1=P+(-pas*(1-theta))*Q;
		real[int] intermediaire2=intermediaire1*Uav;
		real[int] B=intermediaire2+theta*pas*F;
		B=B+(1-theta)*pas*Fav;
	
		///Prise en compte des conditions aux bords dans la matrice à inverser
	
		matrix Ap=A+BOUNDARYPENALIZATION;
	
		///Construction de l'autre matrice avec penalisation


		real[int] BCx(Uh.ndof),BCy(Uh.ndof);

		BCx=mytgv*u[];
		BCx*=0.;
		BCy=mytgv*v[];
		BCy*=0.;

		real[int] BOUNDARYBAS = boundarybas(0,Uh);
		
		real[int] ZEROD(Uh.ndof);
		ZEROD=0.*B(Uh.ndof:2*Uh.ndof-1);
		

		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYBAS ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);
;

		B(0:Uh.ndof-1) = BOUNDARYBAS ? ZEROD : B(0:Uh.ndof-1);



		///Résolution du problème linéaire
	
		real[int] U(taille);
		set(Ap,eps=eps1,solver=UMFPACK);
		U=Ap^-1*B;
	
		///Stockage des résultats
		utab(0:Uh.ndof-1,iter)=U(0:Uh.ndof-1);
		vtab(0:Uh.ndof-1,iter)=U(Uh.ndof:2*Uh.ndof-1);
		ptab(0:Ph.ndof-1,iter)=U(2*Uh.ndof:2*Uh.ndof+Ph.ndof-1);

	}
}


if (type==3){
	/// Schéma BDF2
	schema="BDF2";
	real theta=0.5;
	
	///Mise à jour
	cout<<"iteration : "<<1<<" t : "<<t<<endl;
	t+=pas;
	
	/// Construction du second membre

	real[int] F(taille),Fx(Uh.ndof),Fy(Uh.ndof),Fp(Ph.ndof);

	Uh secx,secy;
	Ph secp;

	secx[] = SecMemx(0,Uh,tgv=mytgv);
	secy[] = SecMemy(0,Uh,tgv=mytgv);	
	secp[] = SecMemp(0,Ph,tgv=mytgv);

	Fx=secx[];
	Fy=secy[];
	Fp=secp[];

	F=[Fx,Fy,Fp];
	
	real[int] Fav(taille),Fxav(Uh.ndof),Fyav(Uh.ndof),Fpav(Ph.ndof);

	Uh secxav,secyav;
	Ph secpav;

	secxav[] = SecMemx(0,Uh,tgv=mytgv);
	secyav[] = SecMemy(0,Uh,tgv=mytgv);
	secpav[] = SecMemp(0,Ph,tgv=mytgv);

	Fxav=secxav[];
	Fyav=secyav[];
	Fpav=secpav[];

	Fav=[Fxav,Fyav,Fpav];	
	
	
	///Construction du problème linéaire au pas de temps considéré
	real[int] Uav(taille);
	Uav=[utab(0:Uh.ndof-1,0),vtab(0:Uh.ndof-1,0),ptab(0:Ph.ndof-1,0)];
	matrix A=(P+(pas*theta)*Q);
	matrix intermediaire1=P+(-pas*(1-theta))*Q;
	real[int] intermediaire2=intermediaire1*Uav;
	real[int] B=intermediaire2+theta*pas*F;
	B=B+(1-theta)*pas*Fav;

	///Prise en compte des conditions aux bords dans la matrice à inverser

	matrix Ap=A+BOUNDARYPENALIZATION;

	///Construction de l'autre matrice avec penalisation


	real[int] BCx(Uh.ndof),BCy(Uh.ndof);

	BCx=mytgv*u[];
	BCx*=0.;
	BCy=mytgv*v[];
	BCy*=0.;

	real[int] BOUNDARYBAS = boundarybas(0,Uh);
	
	real[int] ZEROD(Uh.ndof);
	ZEROD=0.*B(Uh.ndof:2*Uh.ndof-1);
	

	B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYBAS ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);
;

	B(0:Uh.ndof-1) = BOUNDARYBAS ? ZEROD : B(0:Uh.ndof-1);


	///Résolution du problème linéaire

	real[int] U(taille);
	set(Ap,eps=eps1,solver=UMFPACK);
	U=Ap^-1*B;

	///Stockage des résultats
	utab(0:Uh.ndof-1,1)=U(0:Uh.ndof-1);
	vtab(0:Uh.ndof-1,1)=U(Uh.ndof:2*Uh.ndof-1);
	ptab(0:Ph.ndof-1,1)=U(2*Uh.ndof:2*Uh.ndof+Ph.ndof-1);

	
// 	utab(0:Uh.ndof-1,1)=u[]*cos(pi*t);
// 	vtab(0:Uh.ndof-1,1)=v[]*cos(pi*t);
// 	ptab(0:Uh.ndof-1,1)=p[]*cos(pi*t);

		
	////////////// Boucle en temps
	
	for (int iter=2;iter<T;iter++){
		// Mise à jour
		cout<<"iteration : "<<iter<<" t : "<<t<<endl;
		t+=pas;
		
		/// Construction du second membre

		real[int] F(taille),Fx(Uh.ndof),Fy(Uh.ndof),Fp(Ph.ndof);

		Uh secx,secy;
		Ph secp;

		secx[] = SecMemx(0,Uh,tgv=mytgv);
		secy[] = SecMemy(0,Uh,tgv=mytgv);	
		secp[] = SecMemp(0,Ph,tgv=mytgv);

		Fx=secx[];
		Fy=secy[];
		Fp=secp[];

		F=[Fx,Fy,Fp];
		
		/// Construction du problème linéaire au pas de temps considéré
		real[int] U0(taille),U1(taille);
		U0=[utab(0:Uh.ndof-1,iter-2),vtab(0:Uh.ndof-1,iter-2),ptab(0:Ph.ndof-1,iter-2)];
		U1=[utab(0:Uh.ndof-1,iter-1),vtab(0:Uh.ndof-1,iter-1),ptab(0:Ph.ndof-1,iter-1)];
		matrix A=(P+(pas*2./3.)*Q);
		real[int] intermediaire1(taille);
		intermediaire1=P*U1;
		intermediaire1=(4./3.)*intermediaire1;
		real[int] intermediaire2(taille);
		intermediaire2=P*U0;
		intermediaire2=(-1./3.)*intermediaire2;
		real[int] intermediaire3(taille);
		intermediaire3=(2./3.)*pas*F;
		real[int] B=intermediaire1+intermediaire2;
		B=B+intermediaire3;
		
		/// Prise en compte des conditions aux bords dans la matrice à inverser
	
		matrix Ap=A+BOUNDARYPENALIZATION;
	
		///Construction de l'autre matrice avec penalisation


		real[int] BCx(Uh.ndof),BCy(Uh.ndof);

		BCx=mytgv*u[];
		BCx*=0.;
		BCy=mytgv*v[];
		BCy*=0.;

		real[int] BOUNDARYBAS = boundarybas(0,Uh);
		
		real[int] ZEROD(Uh.ndof);
		ZEROD=0.*B(Uh.ndof:2*Uh.ndof-1);
		

		B(Uh.ndof:2*Uh.ndof-1) = BOUNDARYBAS ? ZEROD : B(Uh.ndof:2*Uh.ndof-1);
	;

		B(0:Uh.ndof-1) = BOUNDARYBAS ? ZEROD : B(0:Uh.ndof-1);

		/// Résolution du problème linéaire
	
		real[int] U2(taille);
		set(Ap,eps=eps1,solver=UMFPACK);
		U2=Ap^-1*B;
	
		/// Stockage des résultats
		utab(0:Uh.ndof-1,iter)=U2(0:Uh.ndof-1);
		vtab(0:Uh.ndof-1,iter)=U2(Uh.ndof:2*Uh.ndof-1);
		ptab(0:Ph.ndof-1,iter)=U2(2*Uh.ndof:2*Uh.ndof+Ph.ndof-1);

	}
}

///////////////////////////////////////////////////////////////////////////////////    Visualisation et Sauvegarde des données

/// Création des divers dossiers de stockage
// exec("mkdir "+"Vitesses");
// exec("mkdir "+"Vitesses/"+maillage);
// exec("mkdir "+"Vitesses/"+maillage+"/"+schema);
// exec("mkdir "+"Vitesses/"+maillage+"/"+schema+"/"+discr);
// exec("mkdir "+"Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas);
// exec("mkdir "+"Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/u");
// exec("mkdir "+"Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/v");
// exec("mkdir "+"Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/p");


for (int i=0;i<T;i++){
	u[]=utab(0:Uh.ndof-1,i);
	v[]=vtab(0:Uh.ndof-1,i);
	p[]=ptab(0:Ph.ndof-1,i);
	
	/// Visualisation
	plot([u,v],fill=1,wait=1,value=1);
	
	/// Stockage
// 	ofstream U ("Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/u/u"+i+".txt");
// 	ofstream V ("Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/v/v"+i+".txt");
// 	ofstream P ("Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/p/p"+i+".txt");
// 	U<<u[];
// 	V<<v[];
// 	P<<p[];
}


/*
cout<<endl<<"Rappel"<<endl<<endl<<"Maillage : "<<maillage<<endl<<"Schema : "<<schema<<endl<<"Pas de temps : "<<pas<<endl<<endl;*/


