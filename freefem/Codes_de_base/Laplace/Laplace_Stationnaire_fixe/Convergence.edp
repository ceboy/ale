
/////////////////////////////////////////////////////////////////////////////////// données
real pas =0.005;
int T = 500;

///////////////////////////////////////////////////////////////////////////////////    Maillage
int finesse;
string maillage;
mesh Th;

while(finesse!=2 & finesse!=3 & finesse!=4){
	cout<<"Choix du maillage : 2 grossier, 3 moyen, 4 fin"<<endl;
	cin>> finesse;
}

cout<<endl<<"Maillage choisi : ";
if (finesse==2){
	maillage="grossier";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carregrossier.msh"); 
}
if (finesse==3){
	maillage="moyen";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carremoyen.msh"); 
}
if (finesse==4){
	maillage="fin";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carrefin.msh"); 
}

mesh Thref=readmesh("Carreref.msh"); 


///////////////////////////////////////////////////////////////////////////////////   Espace de discretisation

fespace Uh(Th,P1b);

fespace Uhref(Thref,P1b);



///////////////////////////////////////////////////////////////////////////////////   Macros

macro norme(u) (sqrt(int2d(Thref)(square(dx(u))+square(dy(u))))) //

///////////////////////////////////////////////////////////////////////////////////    Chargement des données

// Stockage
real[int] utab(Uh.ndof);

real[int] utabref(Uhref.ndof);

Uh u;
Uhref uref;

// Chargement des vitesses

ifstream U("Resultats_"+maillage+"/u.txt");
U>>u[];
utab(0:Uh.ndof-1)=u[];


cout<<"Vitesses chargees"<<endl;

// Chargement des vitesses de reférence

ifstream Uref("Resultats_ref/u.txt");
Uref>>uref[];
//cout<<uref[]<<endl;
utabref(0:Uhref.ndof-1)=uref[];


cout<<"Vitesses de reference chargees"<<endl;


///////////////////////////////////////////////////////////////////////////////////    Calculs des erreurs

real erreur;

u[]=utab(0:Uh.ndof-1);

uref[]=utabref(0:Uhref.ndof-1);
//cout<<vtabref(0:Uhref.ndof-1,i);
real norm=norme(uref);
uref=uref-u;

erreur=norme(uref)/norm;
cout<<"erreur : "<<erreur<<endl;

///////////////////////////////////////////////////////////////////////////////////    Calcul de h

Uh h=hTriangle;
real[int] htab(Uh.ndof);
htab(0:Uh.ndof-1)=h[];
real hsum=htab.sum;
real hnbr=htab.n;
real H=hsum/hnbr;
cout<<H<<endl;


///////////////////////////////////////////////////////////////////////////////////    Sauvegarde pour gnuplot

string name="convergence";
ofstream ff(name+".gp",append);
ff << H << "  "  << erreur<< endl;

/*exec("echo 'plot \"convergence.gp\" using 1:2 w l\*/
/*pause 2 \*/
/*set term postscript enhanced color \*/
/*set output \"convergencel2.eps\" \*/
/*replot \*/
/*' | gnuplot");*/

/*exec("echo 'plot \"convergence.gp\" using 1:3 with lines\*/
/*pause 2 \*/
/*set term postscript \*/
/*set output \"convergenceh1.eps\" \*/
/*replot \*/
/*quit \*/
/*' | gnuplot");*/

cout<<"Rappel"<<endl<<endl<<"Maillage : "<<maillage<<endl;




