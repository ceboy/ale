
///////////////////////////////////////////////////////////////////////////////////    Pas de temps
real pas;
real T;
int mypas;
while(mypas!=2 & mypas!=3 & mypas!=4 & mypas!=5){
	cout<<"Choix du pas de temps : 2 grossier, 3 moyen, 4 fin, 5 tres fin"<<endl;
	cin>> mypas;
}

if (mypas==2){
	pas=0.1;
	T=20;
}
if (mypas==3){
	pas=0.05;
	T=40.;
}
if (mypas==4){
	pas=0.01;
	T=200.;
}

if (mypas==5){
	pas=0.005;
	T=400.;
}

/////////////////////////////////////////////////////////////////////////////////// données
real t=0;


///////////////////////////////////////////////////////////////////////////////////    Maillage
int finesse;
string maillage;
mesh Th;

/*while(finesse!=2 & finesse!=3 & finesse!=4 & finesse!=5){*/
/*	cout<<"Choix du maillage : 2 grossier, 3 moyen, 4 fin"<<endl;*/
/*	cin>> finesse;*/
/*}*/

finesse=4;
if (finesse==2){
	maillage="grossier";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carregrossier.msh"); 
}
if (finesse==3){
	maillage="moyen";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carremoyen.msh"); 
}
if (finesse==4){
	maillage="fin";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carrefin.msh"); 
}
if (finesse==5){
	maillage="ref";
	cout<<maillage<<endl<<endl;
	Th=readmesh("Carreref.msh"); 
}

mesh Thref=readmesh("Carreref.msh"); 


/////////////////////////////////////////////////////////////////////////////////// Schéma
string schema;
int type;
while (type!=1 & type!=2 & type!=3){
	cout<<"Choix du schema : Euler Implicite 1 ou Crank Nicolson 2 ou BDF2 3"<<endl;
	cin>>type;
}
if (type==1){
	schema="EI";
}
if (type==2){
	schema="CN";
}
if (type==3){
	schema="BDF2";
}
///////////////////////////////////////////////////////////////////////////////////   Espace de discretisation

string discr="P2";
fespace Uh(Th,P2);


fespace Uhref(Thref,P2);



///////////////////////////////////////////////////////////////////////////////////   Macros


macro normeL2(u) (sqrt(int2d(Thref)(u*u))) //
macro normeH1(u) (sqrt(int2d(Thref)(dx(u)*dx(u))+int2d(Thref)(dy(u)*dy(u)))) //

///////////////////////////////////////////////////////////////////////////////////    Chargement des données

// Stockage
real[int,int] utab(Uh.ndof,T);


real[int,int] utabref(Uhref.ndof,T);


Uh u,v;
Uhref uref,vref;

// Chargement des vitesses
for (int i=0;i<T;i++){
	ifstream U("Vitesses/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/u/u"+i+".txt");
	U>>u[];
	utab(0:Uh.ndof-1,i)=u[];
}

cout<<"Vitesses chargees"<<endl;

// Chargement des vitesses de reférence
/*for (int i=0;i<T;i++){*/
/*	ifstream Uref("Vitesses/ref/"+schema+"/"+discr+"/"+pas+"/u/u"+i+".txt");*/
/*	Uref>>uref[];*/
/*	//cout<<uref[]<<endl;*/
/*	utabref(0:Uhref.ndof-1,i)=uref[];*/
/*}*/

/*cout<<"Vitesses de reference chargees"<<endl;*/



///////////////////////////////////////////////////////////////////////////////////    Calculs des erreurs


real[int] erreurL2(T);
real[int] erreurH1(T);
real absL2=0;
real absH1=0;

real erreurmaxL2=0;
real erreurmaxH1=0;

t-=pas;
for (int i=0;i<T;i++){
	t+=pas;
	
	
	//cout<<test<<endl;
	u[]=utab(0:Uh.ndof-1,i);
// 	uref[]=utabref(0:Uh.ndof-1,i);
	uref =sin(x*pi)*sin(y*pi)*cos(t*pi); 
	real normL2=normeL2(uref);
	real normH1=normeH1(uref);
	uref=uref-u;
	erreurL2(i)=normeL2(uref);
	erreurH1(i)=normeH1(uref);
	
// 	erreurL2(i)=abs(cos(t*pi)-utab(0,i));
// 	erreurH1(i)=(cos(t*pi)-utab(0,i))^2;
	
	cout<<"erreurL2 "<<i<<" "<<erreurL2(i)<<endl;
	cout<<"erreurH1 "<<i<<" "<<erreurH1(i)<<endl;
	if (erreurmaxL2<erreurL2(i)){
		erreurmaxL2=erreurL2(i);
	}	
	if (erreurmaxH1<erreurH1(i)){
		erreurmaxH1=erreurH1(i);
	}
	if (absL2<normL2){
		absL2=normL2;
	}
	if (absH1<normH1){
		absH1=normH1;
	}


	//plot(uref,fill=1,wait=1);
}

cout<<"absL2 : "<<absL2<<" absH1 : "<<absH1<<endl; 
erreurmaxL2=erreurmaxL2/absL2;
cout<<"erreur max L2 : "<<erreurmaxL2<<endl;


real erreurL2H1=sqrt(erreurH1'*erreurH1)/absH1;
cout<<"erreur max H1 : "<<erreurmaxH1<<endl;


///////////////////////////////////////////////////////////////////////////////////    Sauvegarde pour gnuplot

exec("mkdir "+"Gnuplot/");
exec("mkdir "+"Gnuplot/Temps");


string name="Gnuplot/Temps/convergence_"+maillage+"_"+schema+" "+discr;
ofstream ffL2(name+"L2.gp",append);
ofstream ffH1(name+"H1.gp",append);

ffL2 << pas << "  "  << erreurmaxL2<< endl;
ffH1 << pas << "  "  << erreurmaxH1<< endl;


// string namef="Gnuplot/Temps/convergence_finale_"+maillage+"_"+schema+"_"+discr;
// ofstream fffL2(namef+"L2.gp",append);
// ofstream fffH1(namef+"H1.gp",append);
// fffL2 << pas << "  "  << erreurL2(T-1)<< endl;
// fffH1 << pas << "  "  << erreurH1(T-1)<< endl;
// 
// exec("mkdir "+"Erreurs/");
// exec("mkdir "+"Erreurs/"+maillage);
// exec("mkdir "+"Erreurs/"+maillage+"/"+schema);
// exec("mkdir "+"Erreurs/"+maillage+"/"+schema+"/"+discr);
// exec("mkdir "+"Erreurs/"+maillage+"/"+schema+"/"+discr+"/"+pas);
// 
// string chemin="Erreurs/"+maillage+"/"+schema+"/"+discr+"/"+pas+"/";
// ofstream ErreurL2(chemin+"erreurL2.gp",append);
// ofstream ErreurH1(chemin+"erreurH1.gp",append);
// for (int i=0;i<erreurL2.n;i++){
// 	ErreurL2<<i*pas<<" "<<erreurL2(i)<<endl;
// 	ErreurH1<<i*pas<<" "<<erreurH1(i)<<endl;
// }
// 
// 
// 
// 
// 


















/*exec("echo 'plot \"convergence.gp\" using 1:2 w l\*/
/*pause 2 \*/
/*set term postscript enhanced color \*/
/*set output \"convergencel2.eps\" \*/
/*replot \*/
/*' | gnuplot");*/

/*exec("echo 'plot \"convergence.gp\" using 1:3 with lines\*/
/*pause 2 \*/
/*set term postscript \*/
/*set output \"convergenceh1.eps\" \*/
/*replot \*/
/*quit \*/
/*' | gnuplot");*/

cout<<"Rappel"<<endl<<endl<<"Maillage : "<<maillage<<endl<<"Schema : "<<schema<<" Pas de temps : "<<pas<<endl;




